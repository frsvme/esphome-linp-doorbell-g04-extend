esphome:
  name: "doorbell-mi-extend"
  friendly_name: "doorbell-mi-extend"

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
    advanced:
      ignore_efuse_mac_crc: True
      # Required for ESPHome v2024.10 and later - see issue #9
      # Remove for earlier ESPHome versions, which don't support this option.
      ignore_efuse_custom_mac: True

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "****************="
  
  # Custom services to control the chime chip.
  services:
    - service: play_tune
      variables:
        tune: int
        volume: int
        mode: int
      then:
        - remote_transmitter.transmit_szy8039b:
            tune: !lambda 'return tune;'
            volume: !lambda 'return volume;'
            mode: !lambda 'return mode;'
    - service: stop_playing
      then:
        - remote_transmitter.transmit_szy8039b:
            command: STOP
    - service: set_tune
      variables:
        tune: int
      then:
        - lambda: |-
            id(tune_value) = tune;
            id(tune_slider).publish_state(tune);
    - service: set_volume
      variables:
        volume: int
      then:
        - lambda: |-
            id(volume_value) = volume;
            id(volume_slider).publish_state(volume);
    - service: set_mode
      variables:
        mode: int
      then:
        - lambda: |-
            id(mute_switch).state = (mode == 3);
    - service: set_mute
      variables:
        mute: bool
      then:
        - lambda: |-
            id(mute_switch).state = mute;

ota:
  - platform: esphome
    password: "****************"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Doorbell-MI-Ext Fallback Hotspot"
    password: "12345678"

captive_portal:

# Import the external component.
external_components:
  - source: github://frsvme/esphome-linp-doorbell-g04-extend
    components: [ linptech_g6l ]
    
# Add remote protocols for buttons and chime chip.
linptech_g6l:

# Remote receiver to listen for the button presses.
remote_receiver:
  pin: GPIO26
  # You can remove the dumper once you know the IDs, if desired.
#  dump: linptech_g6l
  filter: 20us
  idle: 900us
  tolerance: 33%

# Remote transmitter for talking to the chime chip.
# You'll get a warning about GPIO15 being a strapping pin,
# but it's safe to ignore.
remote_transmitter:
  pin: GPIO15
  carrier_duty_percent: 100%
  
# LED outputs.
output:
  # You'll get a warning about GPIO4 being a strapping pin,
  # but it's safe to ignore.
  - id: blue_led
    platform: gpio
    pin: GPIO4
  # If you choose to use the orange LEDs for the status LED (see below),
  # you might not want to use them for anything else, in which case you can
  # leave this bit out.
  - id: orange_led
    platform: gpio
    pin: GPIO13

# Use the orange LEDs as the status LED, if desired.
#status_led:
#  pin: GPIO13

# Set up lights for the LEDs, with blinking effects similar to the original.
light:
  - platform: binary
    name: Light Blue
    output: blue_led
    id: blue_light
    effects:
      - strobe:
          name: blink
          colors:
            - state: true
              duration: 333ms
            - state: false
              duration: 333ms
  
  - platform: binary
    name: Light Orange
    output: orange_led
    id: orange_light

  #- platform: binary
  #  name: orange light
  #  output: orange_led
  #  id: orange_light
  #  effects:
  #    - strobe:
  #        name: blink
  #        colors:
  #          - state: true
  #            duration: 333ms
  #          - state: false
  #            duration: 333ms

globals:
  - id: tune_value
    type: int
    restore_value: yes
    initial_value: '1'
  - id: volume_value
    type: int
    restore_value: yes
    initial_value: '1'

binary_sensor:
  # The physical buttons on the receiver can be used for whatever you like.
  - platform: gpio
    pin:
      number: GPIO36
      inverted: true
    name: "Button left"
    on_press:
      - light.toggle: blue_light

  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: "Button right"
    on_press:
      - if:
          condition:
            lambda: 'return id(mute_switch).state == true;'
          then:
            - switch.turn_off: mute_switch
            - remote_transmitter.transmit_szy8039b:
                tune: !lambda 'return id(tune_value);'
                volume: !lambda 'return id(volume_value);'
                mode: 1
            - logger.log: "Mute OFF (button)"
          else:
            - switch.turn_on: mute_switch
            - logger.log: "Mute ON (button)"
      
  # For each doorbell button you want to listen for, add a block like this:
  - platform: remote_receiver
    name: Doorbell A
    linptech_g6l:
      # Put the ID found from the dumper here.
      address: 0x860461
    filters:
      # The buttons' transmission is repeated; 0.2s is long enough to debounce.
      # A longer delay can be used to filter out actual repeat presses.
      delayed_off: 0.2s
    on_press:
      then:
        # If you want a hardcoded chime (which works without a HA connection),
        # use the SZY8039B transmitter.
        # - Tune is from 1-40 (see datasheet)
        # - Volume is from 1-8
        # - Mode is from 1-4; since the LEDs are connected only to the ESP32,
        #   modes 1/2/4 play music and mode 3 doesn't (which isn't much use).
        - remote_transmitter.transmit_szy8039b:
            tune: !lambda 'return id(tune_value);'
            volume: !lambda 'return id(volume_value);'
            mode: !lambda 'return id(mute_switch).state ? 3 : 1;'
        # Send an event to Home Assistant with custom parameters, if desired.
        - homeassistant.event:
            event: esphome.button_pressed
            data:
              type: Doorbell
              button: A
        # Blink the LEDs, if desired.  Use any effect you've defined.
        - light.turn_on:
            id: blue_light
            effect: blink
        - delay: 5s
        - light.turn_off: blue_light

# Additional buttons can be configured as desired. !!!Uncomment the block below to add the ID of the second button.!!!
#  - platform: remote_receiver
#    name: Doorbell B
#    linptech_g6l:
#      address: 0xABCDEF
#    filters:
#      delayed_off: 0.2s
#    on_press:
#      then:
#        - remote_transmitter.transmit_szy8039b:
#            tune: !lambda 'return id(tune_value);'
#            volume: !lambda 'return id(volume_value);'
#            mode: !lambda 'return id(mute_switch).state ? 3 : 1;'
#        - homeassistant.event:
#            event: esphome.button_pressed
#            data:
#              type: Doorbell
#              button: B
#        - light.turn_on:
#            id: blue_light
#            effect: blink
#        - delay: 5s
#        - light.turn_off: blue_light

number:
  - platform: template
    name: "Tune (Melody)"
    id: tune_slider
    min_value: 1
    max_value: 40
    step: 1
    restore_value: true
    initial_value: 1
    set_action:
      - lambda: |-
          id(tune_value) = (int)x;
          id(tune_slider).publish_state((int)x);
      - logger.log: "Tune set to x"

  - platform: template
    name: "Volume"
    id: volume_slider
    min_value: 1
    max_value: 8
    step: 1
    restore_value: true
    initial_value: 1
    set_action:
      - lambda: |-
          id(volume_value) = (int)x;
          id(volume_slider).publish_state((int)x);
      - logger.log: "Volume set to x"

button:
  - platform: restart
    name: "Doorbell Restart"

  - platform: template
    name: "Play Doorbell"
    id: play_doorbell
    on_press:
      - remote_transmitter.transmit_szy8039b:
          tune: !lambda 'return id(tune_value);'
          volume: !lambda 'return id(volume_value);'
          mode: !lambda 'return id(mute_switch).state ? 3 : 1;'
      - logger.log: "Virtual doorbell pressed"

switch:
  - platform: template
    name: "Mute"
    id: mute_switch
    optimistic: true
    restore_mode: "ALWAYS_OFF"
    turn_on_action:
      - light.turn_on: orange_light
      - logger.log: "Mute ON"
    turn_off_action:
      - light.turn_off: orange_light
      - logger.log: "Mute OFF"
