esphome:
  name: doorbell

# Configure the board; the G6L-WIFI uses a single-core ESP32.
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
    advanced:
      ignore_efuse_mac_crc: True
      # Required for ESPHome v2024.10 and later - see issue #9
      # Remove for earlier ESPHome versions, which don't support this option.
      ignore_efuse_custom_mac: True

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable Home Assistant API
api:
  password: !secret api_password

  # Custom services to control the chime chip.
  services:
    - service: play_tune
      variables:
        tune: int
        volume: int
        mode: int
      then:
        - remote_transmitter.transmit_szy8039b:
            tune: !lambda 'return tune;'
            volume: !lambda 'return volume;'
            mode: !lambda 'return mode;'
    - service: stop_playing
      then:
        - remote_transmitter.transmit_szy8039b:
            command: STOP

# Enable over-the-air updates.
ota:
  password: !secret ota_password
  safe_mode: True

# Enable logging
logger:
  level: DEBUG

# Import the external component.
external_components:
  - source: github://pauln/esphome-linp-doorbell-g04
    components: [ linptech_g6l ]
    
# Add remote protocols for buttons and chime chip.
linptech_g6l:

# Remote receiver to listen for the button presses.
remote_receiver:
  pin: GPIO26
  # You can remove the dumper once you know the IDs, if desired.
  dump: linptech_g6l
  filter: 20us
  idle: 900us

# Remote transmitter for talking to the chime chip.
# You'll get a warning about GPIO15 being a strapping pin,
# but it's safe to ignore.
remote_transmitter:
  pin: GPIO15
  carrier_duty_percent: 100%
  
# LED outputs.
output:
  # You'll get a warning about GPIO4 being a strapping pin,
  # but it's safe to ignore.
  - id: blue_led
    platform: gpio
    pin: GPIO4
  # If you choose to use the orange LEDs for the status LED (see below),
  # you might not want to use them for anything else, in which case you can
  # leave this bit out.
  - id: orange_led
    platform: gpio
    pin: GPIO13

# Use the orange LEDs as the status LED, if desired.
status_led:
  pin: GPIO13

# Set up lights for the LEDs, with blinking effects similar to the original.
light:
  - platform: binary
    name: blue light
    output: blue_led
    id: blue_light
    effects:
      - strobe:
          name: blink
          colors:
            - state: true
              duration: 333ms
            - state: false
              duration: 333ms

  - platform: binary
    name: orange light
    output: orange_led
    id: orange_light
    effects:
      - strobe:
          name: blink
          colors:
            - state: true
              duration: 333ms
            - state: false
              duration: 333ms
    

binary_sensor:
  # The physical buttons on the receiver can be used for whatever you like.
  - platform: gpio
    pin:
      number: GPIO36
      inverted: true
    name: "left button"
    on_press:
      - light.toggle: blue_light
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: "right button"
    on_press:
      - light.toggle: orange_light
      
  # For each doorbell button you want to listen for, add a block like this:
  - platform: remote_receiver
    name: Doorbell A
    linptech_g6l:
      # Put the ID found from the dumper here.
      address: 0x123456
    filters:
      # The buttons' transmission is repeated; 0.2s is long enough to debounce.
      # A longer delay can be used to filter out actual repeat presses.
      delayed_off: 0.2s
    on_press:
      then:
        # If you want a hardcoded chime (which works without a HA connection),
        # use the SZY8039B transmitter.
        # - Tune is from 1-40 (see datasheet)
        # - Volume is from 1-8
        # - Mode is from 1-4; since the LEDs are connected only to the ESP32,
        #   modes 1/2/4 play music and mode 3 doesn't (which isn't much use).
        - remote_transmitter.transmit_szy8039b:
            tune: 1
            volume: 1
            mode: 1
        # Send an event to Home Assistant with custom parameters, if desired.
        - homeassistant.event:
            event: esphome.button_pressed
            data:
              type: Doorbell
              button: A
        # Blink the LEDs, if desired.  Use any effect you've defined.
        - light.turn_on:
            id: blue_light
            effect: blink
        - delay: 5s
        - light.turn_off: blue_light
      
  # Additional buttons can be configured as desired.
  - platform: remote_receiver
    name: Doorbell B
    linptech_g6l:
      address: 0xABCDEF
    filters:
      delayed_off: 0.2s
    on_press:
      then:
        - remote_transmitter.transmit_szy8039b:
            tune: 2
            volume: 1
            mode: 1
        - homeassistant.event:
            event: esphome.button_pressed
            data:
              type: Doorbell
              button: B
        - light.turn_on:
            id: orange_light
            effect: blink
        - delay: 5s
        - light.turn_off: orange_light


# Remote restart (via API), if desired.
switch:
  - platform: restart
    name: "Doorbell Restart"
